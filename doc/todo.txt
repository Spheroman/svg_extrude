Checks:
  * Code TODOs
  * Inspections
  * Run all unit tests

Future work:
  * Output file generation - 3MF:
      * Single 3MF file with multiple objects
      * Include 3MF thumbnail
      * Change 3MF title from "OpenSCAD model" to filename + group color
      * Colors in 3MF file, if possible
      * Make --3mf default
  * Output file generation - others:
      * Generate JSON. This allows further processing by other tools without
        parsing the SCAD file.
      * Output the individual SCAD files
      * SVG with replaced colors
  * CLI:
      * Show list of groups, each with number of shapes and maximum ΔE (JND ≈
        2.3)
      * Reading available colors from environment variable
      * Reading available colors from JSON file (name and color, which can be a
        named color (defining an alias))
      * Allow configuring the OpenSCAD executable: PATH, environment variable,
        command line
  * Error handling:
      * OpenSCAD not found
      * Fill style is not a simple color
  * Operate without OpenSCAD
      * CSG difference
      * Triangulation
      * Output file (STL, 3MF, potentially others) generation
  * OpenSCAD:
      * In OpenSCAD file, define colors like `red = "#ff0000";`
      * Use OpenSCAD "-D foo=bar" to select groups instead of writing multiple
        SCAD files. This allows rendering from the same file as written
        with --scad.
      * Consider using OpenSCAD primitives: cube, circle, text
  * Geometry:
      * Allow specifying the orgin, e. g. "bottom left" so it looks like in
        Inkscape.
      * Do not subtract disjoint paths to reduce the number of difference CSG
        operations.
      * Additional geometry stacked on top of everything (configurable height),
        with optional color selection (default: color of the back-most shape)
        Use union of all shapes? Separate shape? Separate layer?
      * Two-sided images: one set of groups, and then an independent set of
        groups on top of that (potentially with a solid layer inbetween)
        That would definitely be layers in the image (note that layers are not
        a feature of SVG; inkscape uses groups with inkscape:groupmode="layer"
        and inkscape:label="name").
        Also: --from above and --from below (origin at upper left or lower left)

  * SVG file:
      * Seems like paths without id are valid; use a Namespace and add
        force_disambiguation so we don't end up with path and path_...
      * Read SVG <desc> and/or <title> and write them as comments to the
        OpenSCAD file. Also the original SVG element ID.
      * Layer for ignored elements (for comments)? Layer classes?
      * Use svgpathtools?
  * Implementation:
      * Reading from SVG should not be a method of the model classes
      * Scene.from_svg combines shape creation and scene creation
  * Output:
      * Option: file and group names use numeric colors, even if a name is
        defined
      * If the overlay has the same color as one of the groups, render it to a
        single model: PrusaSlicer may not print that color last
      * Overlay generation is ugly
      * Overlay: possible collision with a color named "overlay"
  * Overlays:
      * Restrict to a specified shape or group
      * Place in union with specified group
  * Show more info:
      * Shapes with number of points?
      * Color groups with number of shapes and total number of points?
  * Outlines:
      * Example:
            difference() {
                offset(delta=0.3) shape_x();
                offset(delta=-0.3) shape_x();
            }
      * stroke-linejoin:
          * round: r=width/2
          * miter: delta=width/2
          * bevel: delta=wdith/2, chamfer=true
      * Layout:
          * Below: offset out (stroke color)
          * Above: offset in (fill color)
          * Special case: no fill
