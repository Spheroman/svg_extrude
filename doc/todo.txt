Checks:
  * Code TODOs
  * Inspections
  * Run all unit tests

Future work:
  * Output file generation - 3MF:
      * Single 3MF file with multiple objects
      * Include 3MF thumbnail
      * Change 3MF title from "OpenSCAD model" to filename + group color
      * Colors in 3MF file, if possible
      * Make --3mf default
  * Output file generation - others:
      * Generate JSON. This allows further processing by other tools without
        parsing the SCAD file.
      * Output the individual SCAD files
      * SVG with replaced colors
  * CLI:
      * Show list of groups, each with number of shapes and maximum ΔE (JND ≈
        2.3)
      * Reading available colors from environment variable
      * Reading available colors from JSON file (name and color, which can be a
        named color (defining an alias))
      * Allow configuring the OpenSCAD executable: PATH, environment variable,
        command line
  * Error handling:
      * OpenSCAD not found
      * Fill style is not a simple color
  * Operate without OpenSCAD. Need:
      * CSG difference, union
      * Triangulation
      * Output file (STL, 3MF, potentially others) generation
      * Stroking
  * OpenSCAD:
      * In OpenSCAD file, define colors like `red = "#ff0000";`
      * Consider using OpenSCAD primitives: cube, circle, text
  * Geometry:
      * Allow specifying the orgin, e. g. "bottom left" so it looks like in
        Inkscape.
      * Do not subtract disjoint paths to reduce the number of difference CSG
        operations.

  * SVG file:
      * Seems like paths without id are valid; use a Namespace and add
        force_disambiguation so we don't end up with path and path_...
      * Read SVG <desc> and/or <title> and write them as comments to the
        OpenSCAD file. Also the original SVG element ID.
      * Use svgpathtools?
  * Implementation:
      * Reading from SVG should not be a method of the model classes
      * Scene.from_svg combines shape creation and scene creation
  * Output:
      * Option: file and group names use numeric colors, even if a name is
        defined
  * Show more info:
      * Shapes with number of points?
      * Color groups with number of shapes and total number of points?
  * Outlines:
      * Example:
            difference() {
                offset(delta=0.3) shape_x();
                offset(delta=-0.3) shape_x();
            }
      * stroke-linejoin:
          * round: r=width/2
          * miter: delta=width/2
          * bevel: delta=wdith/2, chamfer=true
      * Layout:
          * Below: offset out (stroke color)
          * Above: offset in (fill color)
          * Special case: no fill
  * Layers:
      * All shapes from a layer start at the same height and have the same thickness
      * By default, layers are taken from inkscape layers
      * --from above and --from below (default) selects layer order
          * Could select default origin: upper left for below and lower left for
            above. That way, it would always be in +x +y
      * --overlay adds a layer behind (in the SVG: below)
      * Open questions:
          * How do we specify the layer height?
          * How do we specify a layer that encomasses all geometry below? How do we
            specify its color?
          * Do we output separate models for each layer of merge same-color objects
            for all layers?
          * We probably want to use XML properties. How do we specify a version?
          * For --overlay, what color do we use? Or do we skip the color and use
            "overlay" as the name (beware name collisions!)
          * What if we're not using inkscape? SVG has no layers, only groups. Layers
            are not a feature of SVG; inkscape uses groups with inkscape:groupmode=
            "layer" and inkscape:label="name").
          * Can we "comment out" a layer?  for ignored elements (for comments)?
              * Useful for: commentary; test prints
              * --ignore-layer?
              * By layer name? By attribute? By class?
  * Old overlays (partly obsoleted by layers):
      * Restrict to a specified shape or group
      * Place in union with specified group
      * If the overlay has the same color as one of the groups, render it to a
        single model: PrusaSlicer may not print that color last
      * Overlay generation is ugly
      * Overlay: possible collision with a color named "overlay"
